// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: model.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "model.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* MetaPar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaPar_reflection_ = NULL;
const ::google::protobuf::Descriptor* FTRLProxiamlPar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FTRLProxiamlPar_reflection_ = NULL;
const ::google::protobuf::Descriptor* Instance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Instance_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaProb_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaProb_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_model_2eproto() {
  protobuf_AddDesc_model_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "model.proto");
  GOOGLE_CHECK(file != NULL);
  MetaPar_descriptor_ = file->message_type(0);
  static const int MetaPar_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaPar, l1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaPar, l2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaPar, alpha_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaPar, beta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaPar, d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaPar, multi_cls_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaPar, quad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaPar, cubic_),
  };
  MetaPar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaPar_descriptor_,
      MetaPar::default_instance_,
      MetaPar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaPar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaPar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaPar));
  FTRLProxiamlPar_descriptor_ = file->message_type(1);
  static const int FTRLProxiamlPar_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FTRLProxiamlPar, z_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FTRLProxiamlPar, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FTRLProxiamlPar, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FTRLProxiamlPar, index_),
  };
  FTRLProxiamlPar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FTRLProxiamlPar_descriptor_,
      FTRLProxiamlPar::default_instance_,
      FTRLProxiamlPar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FTRLProxiamlPar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FTRLProxiamlPar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FTRLProxiamlPar));
  Instance_descriptor_ = file->message_type(2);
  static const int Instance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, x_),
  };
  Instance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Instance_descriptor_,
      Instance::default_instance_,
      Instance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Instance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Instance));
  MetaProb_descriptor_ = file->message_type(3);
  static const int MetaProb_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaProb, prob_size_),
  };
  MetaProb_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaProb_descriptor_,
      MetaProb::default_instance_,
      MetaProb_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaProb, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaProb, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaProb));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_model_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaPar_descriptor_, &MetaPar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FTRLProxiamlPar_descriptor_, &FTRLProxiamlPar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Instance_descriptor_, &Instance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaProb_descriptor_, &MetaProb::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_model_2eproto() {
  delete MetaPar::default_instance_;
  delete MetaPar_reflection_;
  delete FTRLProxiamlPar::default_instance_;
  delete FTRLProxiamlPar_reflection_;
  delete Instance::default_instance_;
  delete Instance_reflection_;
  delete MetaProb::default_instance_;
  delete MetaProb_reflection_;
}

void protobuf_AddDesc_model_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013model.proto\"\201\001\n\007MetaPar\022\n\n\002l1\030\001 \002(\002\022\n\n"
    "\002l2\030\002 \002(\002\022\r\n\005alpha\030\003 \002(\002\022\014\n\004beta\030\004 \002(\002\022\t"
    "\n\001D\030\005 \002(\r\022\021\n\tmulti_cls\030\006 \002(\005\022\020\n\004quad\030\007 \003"
    "(\rB\002\020\001\022\021\n\005cubic\030\010 \003(\rB\002\020\001\"A\n\017FTRLProxiam"
    "lPar\022\t\n\001z\030\001 \002(\002\022\t\n\001n\030\002 \002(\002\022\t\n\001x\030\003 \002(\r\022\r\n"
    "\005index\030\004 \002(\005\"$\n\010Instance\022\t\n\001y\030\001 \002(\002\022\r\n\001x"
    "\030\002 \003(\rB\002\020\001\"\035\n\010MetaProb\022\021\n\tprob_size\030\001 \002("
    "\r", 281);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "model.proto", &protobuf_RegisterTypes);
  MetaPar::default_instance_ = new MetaPar();
  FTRLProxiamlPar::default_instance_ = new FTRLProxiamlPar();
  Instance::default_instance_ = new Instance();
  MetaProb::default_instance_ = new MetaProb();
  MetaPar::default_instance_->InitAsDefaultInstance();
  FTRLProxiamlPar::default_instance_->InitAsDefaultInstance();
  Instance::default_instance_->InitAsDefaultInstance();
  MetaProb::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_model_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_model_2eproto {
  StaticDescriptorInitializer_model_2eproto() {
    protobuf_AddDesc_model_2eproto();
  }
} static_descriptor_initializer_model_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MetaPar::kL1FieldNumber;
const int MetaPar::kL2FieldNumber;
const int MetaPar::kAlphaFieldNumber;
const int MetaPar::kBetaFieldNumber;
const int MetaPar::kDFieldNumber;
const int MetaPar::kMultiClsFieldNumber;
const int MetaPar::kQuadFieldNumber;
const int MetaPar::kCubicFieldNumber;
#endif  // !_MSC_VER

MetaPar::MetaPar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaPar::InitAsDefaultInstance() {
}

MetaPar::MetaPar(const MetaPar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaPar::SharedCtor() {
  _cached_size_ = 0;
  l1_ = 0;
  l2_ = 0;
  alpha_ = 0;
  beta_ = 0;
  d_ = 0u;
  multi_cls_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaPar::~MetaPar() {
  SharedDtor();
}

void MetaPar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MetaPar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaPar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaPar_descriptor_;
}

const MetaPar& MetaPar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

MetaPar* MetaPar::default_instance_ = NULL;

MetaPar* MetaPar::New() const {
  return new MetaPar;
}

void MetaPar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    l1_ = 0;
    l2_ = 0;
    alpha_ = 0;
    beta_ = 0;
    d_ = 0u;
    multi_cls_ = 0;
  }
  quad_.Clear();
  cubic_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaPar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float l1 = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l1_)));
          set_has_l1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_l2;
        break;
      }

      // required float l2 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_l2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &l2_)));
          set_has_l2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_alpha;
        break;
      }

      // required float alpha = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_alpha:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &alpha_)));
          set_has_alpha();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(37)) goto parse_beta;
        break;
      }

      // required float beta = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_beta:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &beta_)));
          set_has_beta();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_D;
        break;
      }

      // required uint32 D = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_D:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &d_)));
          set_has_d();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_multi_cls;
        break;
      }

      // required int32 multi_cls = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_multi_cls:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multi_cls_)));
          set_has_multi_cls();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_quad;
        break;
      }

      // repeated uint32 quad = 7 [packed = true];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quad:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_quad())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58, input, this->mutable_quad())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_cubic;
        break;
      }

      // repeated uint32 cubic = 8 [packed = true];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cubic:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_cubic())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 66, input, this->mutable_cubic())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaPar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float l1 = 1;
  if (has_l1()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->l1(), output);
  }

  // required float l2 = 2;
  if (has_l2()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->l2(), output);
  }

  // required float alpha = 3;
  if (has_alpha()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->alpha(), output);
  }

  // required float beta = 4;
  if (has_beta()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->beta(), output);
  }

  // required uint32 D = 5;
  if (has_d()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->d(), output);
  }

  // required int32 multi_cls = 6;
  if (has_multi_cls()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->multi_cls(), output);
  }

  // repeated uint32 quad = 7 [packed = true];
  if (this->quad_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_quad_cached_byte_size_);
  }
  for (int i = 0; i < this->quad_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->quad(i), output);
  }

  // repeated uint32 cubic = 8 [packed = true];
  if (this->cubic_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(8, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_cubic_cached_byte_size_);
  }
  for (int i = 0; i < this->cubic_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->cubic(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaPar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float l1 = 1;
  if (has_l1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->l1(), target);
  }

  // required float l2 = 2;
  if (has_l2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->l2(), target);
  }

  // required float alpha = 3;
  if (has_alpha()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->alpha(), target);
  }

  // required float beta = 4;
  if (has_beta()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->beta(), target);
  }

  // required uint32 D = 5;
  if (has_d()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->d(), target);
  }

  // required int32 multi_cls = 6;
  if (has_multi_cls()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->multi_cls(), target);
  }

  // repeated uint32 quad = 7 [packed = true];
  if (this->quad_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _quad_cached_byte_size_, target);
  }
  for (int i = 0; i < this->quad_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->quad(i), target);
  }

  // repeated uint32 cubic = 8 [packed = true];
  if (this->cubic_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      8,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _cubic_cached_byte_size_, target);
  }
  for (int i = 0; i < this->cubic_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->cubic(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaPar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float l1 = 1;
    if (has_l1()) {
      total_size += 1 + 4;
    }

    // required float l2 = 2;
    if (has_l2()) {
      total_size += 1 + 4;
    }

    // required float alpha = 3;
    if (has_alpha()) {
      total_size += 1 + 4;
    }

    // required float beta = 4;
    if (has_beta()) {
      total_size += 1 + 4;
    }

    // required uint32 D = 5;
    if (has_d()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->d());
    }

    // required int32 multi_cls = 6;
    if (has_multi_cls()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->multi_cls());
    }

  }
  // repeated uint32 quad = 7 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->quad_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->quad(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _quad_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated uint32 cubic = 8 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->cubic_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->cubic(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _cubic_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaPar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaPar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaPar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaPar::MergeFrom(const MetaPar& from) {
  GOOGLE_CHECK_NE(&from, this);
  quad_.MergeFrom(from.quad_);
  cubic_.MergeFrom(from.cubic_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_l1()) {
      set_l1(from.l1());
    }
    if (from.has_l2()) {
      set_l2(from.l2());
    }
    if (from.has_alpha()) {
      set_alpha(from.alpha());
    }
    if (from.has_beta()) {
      set_beta(from.beta());
    }
    if (from.has_d()) {
      set_d(from.d());
    }
    if (from.has_multi_cls()) {
      set_multi_cls(from.multi_cls());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaPar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaPar::CopyFrom(const MetaPar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaPar::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void MetaPar::Swap(MetaPar* other) {
  if (other != this) {
    std::swap(l1_, other->l1_);
    std::swap(l2_, other->l2_);
    std::swap(alpha_, other->alpha_);
    std::swap(beta_, other->beta_);
    std::swap(d_, other->d_);
    std::swap(multi_cls_, other->multi_cls_);
    quad_.Swap(&other->quad_);
    cubic_.Swap(&other->cubic_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaPar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaPar_descriptor_;
  metadata.reflection = MetaPar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FTRLProxiamlPar::kZFieldNumber;
const int FTRLProxiamlPar::kNFieldNumber;
const int FTRLProxiamlPar::kXFieldNumber;
const int FTRLProxiamlPar::kIndexFieldNumber;
#endif  // !_MSC_VER

FTRLProxiamlPar::FTRLProxiamlPar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FTRLProxiamlPar::InitAsDefaultInstance() {
}

FTRLProxiamlPar::FTRLProxiamlPar(const FTRLProxiamlPar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FTRLProxiamlPar::SharedCtor() {
  _cached_size_ = 0;
  z_ = 0;
  n_ = 0;
  x_ = 0u;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FTRLProxiamlPar::~FTRLProxiamlPar() {
  SharedDtor();
}

void FTRLProxiamlPar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FTRLProxiamlPar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FTRLProxiamlPar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FTRLProxiamlPar_descriptor_;
}

const FTRLProxiamlPar& FTRLProxiamlPar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

FTRLProxiamlPar* FTRLProxiamlPar::default_instance_ = NULL;

FTRLProxiamlPar* FTRLProxiamlPar::New() const {
  return new FTRLProxiamlPar;
}

void FTRLProxiamlPar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    z_ = 0;
    n_ = 0;
    x_ = 0u;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FTRLProxiamlPar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float z = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_n;
        break;
      }

      // required float n = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_n:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &n_)));
          set_has_n();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_x;
        break;
      }

      // required uint32 x = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_index;
        break;
      }

      // required int32 index = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FTRLProxiamlPar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float z = 1;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->z(), output);
  }

  // required float n = 2;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->n(), output);
  }

  // required uint32 x = 3;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->x(), output);
  }

  // required int32 index = 4;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FTRLProxiamlPar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float z = 1;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->z(), target);
  }

  // required float n = 2;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->n(), target);
  }

  // required uint32 x = 3;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->x(), target);
  }

  // required int32 index = 4;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FTRLProxiamlPar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float z = 1;
    if (has_z()) {
      total_size += 1 + 4;
    }

    // required float n = 2;
    if (has_n()) {
      total_size += 1 + 4;
    }

    // required uint32 x = 3;
    if (has_x()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->x());
    }

    // required int32 index = 4;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FTRLProxiamlPar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FTRLProxiamlPar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FTRLProxiamlPar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FTRLProxiamlPar::MergeFrom(const FTRLProxiamlPar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_z()) {
      set_z(from.z());
    }
    if (from.has_n()) {
      set_n(from.n());
    }
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FTRLProxiamlPar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FTRLProxiamlPar::CopyFrom(const FTRLProxiamlPar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FTRLProxiamlPar::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void FTRLProxiamlPar::Swap(FTRLProxiamlPar* other) {
  if (other != this) {
    std::swap(z_, other->z_);
    std::swap(n_, other->n_);
    std::swap(x_, other->x_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FTRLProxiamlPar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FTRLProxiamlPar_descriptor_;
  metadata.reflection = FTRLProxiamlPar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Instance::kYFieldNumber;
const int Instance::kXFieldNumber;
#endif  // !_MSC_VER

Instance::Instance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Instance::InitAsDefaultInstance() {
}

Instance::Instance(const Instance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Instance::SharedCtor() {
  _cached_size_ = 0;
  y_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Instance::~Instance() {
  SharedDtor();
}

void Instance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Instance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Instance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Instance_descriptor_;
}

const Instance& Instance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

Instance* Instance::default_instance_ = NULL;

Instance* Instance::New() const {
  return new Instance;
}

void Instance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    y_ = 0;
  }
  x_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Instance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float y = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_x;
        break;
      }

      // repeated uint32 x = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 18, input, this->mutable_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Instance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required float y = 1;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->y(), output);
  }

  // repeated uint32 x = 2 [packed = true];
  if (this->x_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_x_cached_byte_size_);
  }
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->x(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Instance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required float y = 1;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->y(), target);
  }

  // repeated uint32 x = 2 [packed = true];
  if (this->x_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _x_cached_byte_size_, target);
  }
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->x(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Instance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required float y = 1;
    if (has_y()) {
      total_size += 1 + 4;
    }

  }
  // repeated uint32 x = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->x_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->x(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _x_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Instance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Instance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Instance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Instance::MergeFrom(const Instance& from) {
  GOOGLE_CHECK_NE(&from, this);
  x_.MergeFrom(from.x_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_y()) {
      set_y(from.y());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Instance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Instance::CopyFrom(const Instance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Instance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Instance::Swap(Instance* other) {
  if (other != this) {
    std::swap(y_, other->y_);
    x_.Swap(&other->x_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Instance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Instance_descriptor_;
  metadata.reflection = Instance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetaProb::kProbSizeFieldNumber;
#endif  // !_MSC_VER

MetaProb::MetaProb()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaProb::InitAsDefaultInstance() {
}

MetaProb::MetaProb(const MetaProb& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaProb::SharedCtor() {
  _cached_size_ = 0;
  prob_size_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaProb::~MetaProb() {
  SharedDtor();
}

void MetaProb::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MetaProb::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaProb::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaProb_descriptor_;
}

const MetaProb& MetaProb::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_model_2eproto();
  return *default_instance_;
}

MetaProb* MetaProb::default_instance_ = NULL;

MetaProb* MetaProb::New() const {
  return new MetaProb;
}

void MetaProb::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prob_size_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaProb::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 prob_size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &prob_size_)));
          set_has_prob_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaProb::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 prob_size = 1;
  if (has_prob_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->prob_size(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaProb::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 prob_size = 1;
  if (has_prob_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->prob_size(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaProb::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 prob_size = 1;
    if (has_prob_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->prob_size());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaProb::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaProb* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaProb*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaProb::MergeFrom(const MetaProb& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prob_size()) {
      set_prob_size(from.prob_size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaProb::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaProb::CopyFrom(const MetaProb& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaProb::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MetaProb::Swap(MetaProb* other) {
  if (other != this) {
    std::swap(prob_size_, other->prob_size_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaProb::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaProb_descriptor_;
  metadata.reflection = MetaProb_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
